// I used the generate_random_numbers function to generate an array of random 1000 numbers from a pool of 10000 numbers. Then I passed the array returned from the
// generate_random_numbers function into the merge_sort function, then each of the two different arrays are recursively
// broken down until the base case is met. After that, that's when the comparison of numbers or sorting begins in the merge function. 
import random

def generate_random_numbers():
    return [random.randint(1, 10000) for _ in range(1000)]

random_numbers = generate_random_numbers()


def merge_sort(arr):
    if len(arr) <= 1:
        return arr

    mid = len(arr) // 2
    left_half = merge_sort(arr[:mid])
    right_half = merge_sort(arr[mid:])
    return merge(left_half, right_half)

def merge(left, right):
    sorted_array = []
    left_index = right_index = 0

    while left_index < len(left) and right_index < len(right):
        if left[left_index] < right[right_index]:
            sorted_array.append(left[left_index])
            left_index += 1
        else:
            sorted_array.append(right[right_index])
            right_index += 1

    sorted_array.extend(left[left_index:])
    sorted_array.extend(right[right_index:])
    
    return sorted_array

arr = random_numbers
sorted_arr = merge_sort(arr)
print(sorted_arr)
